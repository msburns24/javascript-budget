{"version":3,"file":"main.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC;AACvC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,qEAAqE;;AAErE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;;AAEA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA,wBAAwB,oBAAoB;AAC5C;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,cAAc,WAAW;AACzB,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA;;AAEA;;AAEA,sBAAsB,mBAAmB;AACzC;AACA;AACA,wBAAwB,iBAAiB;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B,eAAe,WAAW;AAC1B;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB,wBAAwB;AAChD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,oBAAoB;AAC1C;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM,KAA6B;AACnC;AACA;AACA,CAAC;;;;;;;;;;;;;;;;;;;AClgCD;AACkC;AACT;AACzB;AACO;AACP;AACA;AACA,iBAAiB,iIAAe;AAChC,mBAAmB,iDAAa;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,YAAY;AAC9B,oBAAoB,YAAY;AAChC,yCAAyC,gBAAgB;AACzD,yCAAyC,iCAAiC;AAC1E;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChCmD;AACnD;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,wDAAY;AAChD,qCAAqC,wDAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kDAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,oCAAoC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,6CAA6C;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kDAAM;AACzB;AACA;AACA,mBAAmB,wDAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC1JO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/BO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4CAA4C;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,eAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,MAAM;AACN,kBAAkB;AAClB,MAAM;AACN,kBAAkB;AAClB;AACA;AACA;AACA;;;;;;UChGA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNyD;AACK;AACH;;AAE3D;AACA;AACA,oBAAoB,oEAAY;AAChC;;AAEA,mBAAmB,kEAAY;AAC/B,uBAAuB,uEAAc;;AAErC;AACA;AACA;AACA,gC","sources":["webpack://javascript-budget/./node_modules/jquery-csv/src/jquery.csv.js","webpack://javascript-budget/./src/modules/csv-data-frame.js","webpack://javascript-budget/./src/modules/document-helper.js","webpack://javascript-budget/./src/modules/helper.js","webpack://javascript-budget/./src/modules/transactions.js","webpack://javascript-budget/webpack/bootstrap","webpack://javascript-budget/webpack/runtime/compat get default export","webpack://javascript-budget/webpack/runtime/define property getters","webpack://javascript-budget/webpack/runtime/hasOwnProperty shorthand","webpack://javascript-budget/webpack/runtime/make namespace object","webpack://javascript-budget/./src/index.js"],"sourcesContent":["/* eslint no-prototype-builtins: 0 */\n/**\n * jQuery-csv (jQuery Plugin)\n *\n * This document is licensed as free software under the terms of the\n * MIT License: http://www.opensource.org/licenses/mit-license.php\n *\n * Acknowledgements:\n * The original design and influence to implement this library as a jquery\n * plugin is influenced by jquery-json (http://code.google.com/p/jquery-json/).\n * If you're looking to use native JSON.Stringify but want additional backwards\n * compatibility for browsers that don't support it, I highly recommend you\n * check it out.\n *\n * A special thanks goes out to rwk@acm.org for providing a lot of valuable\n * feedback to the project including the core for the new FSM\n * (Finite State Machine) parsers. If you're looking for a stable TSV parser\n * be sure to take a look at jquery-tsv (http://code.google.com/p/jquery-tsv/).\n\n * For legal purposes I'll include the \"NO WARRANTY EXPRESSED OR IMPLIED.\n * USE AT YOUR OWN RISK.\". Which, in 'layman's terms' means, by using this\n * library you are accepting responsibility if it breaks your code.\n *\n * Legal jargon aside, I will do my best to provide a useful and stable core\n * that can effectively be built on.\n *\n * Copyrighted 2012 by Evan Plaice.\n */\n\nRegExp.escape = function (s) {\n  return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\n};\n\n(function () {\n  'use strict'\n\n  let $\n\n  // to keep backwards compatibility\n  if (typeof jQuery !== 'undefined' && jQuery) {\n    $ = jQuery\n  } else {\n    $ = {}\n  }\n\n  /**\n   * jQuery.csv.defaults\n   * Encapsulates the method paramater defaults for the CSV plugin module.\n   */\n\n  $.csv = {\n    defaults: {\n      separator: ',',\n      delimiter: '\"',\n      headers: true\n    },\n\n    hooks: {\n      castToScalar: function (value, state) {\n        const hasDot = /\\./\n        if (isNaN(value)) {\n          return value\n        } else {\n          if (hasDot.test(value)) {\n            return parseFloat(value)\n          } else {\n            const integer = parseInt(value)\n            if (isNaN(integer)) {\n              return null\n            } else {\n              return integer\n            }\n          }\n        }\n      }\n    },\n\n    parsers: {\n      parse: function (csv, options) {\n        // cache settings\n        const separator = options.separator\n        const delimiter = options.delimiter\n\n        // set initial state if it's missing\n        if (!options.state.rowNum) {\n          options.state.rowNum = 1\n        }\n        if (!options.state.colNum) {\n          options.state.colNum = 1\n        }\n\n        // clear initial state\n        const data = []\n        let entry = []\n        let state = 0\n        let value = ''\n        let exit = false\n\n        function endOfEntry () {\n          // reset the state\n          state = 0\n          value = ''\n\n          // if 'start' hasn't been met, don't output\n          if (options.start && options.state.rowNum < options.start) {\n            // update global state\n            entry = []\n            options.state.rowNum++\n            options.state.colNum = 1\n            return\n          }\n\n          if (options.onParseEntry === undefined) {\n            // onParseEntry hook not set\n            data.push(entry)\n          } else {\n            const hookVal = options.onParseEntry(entry, options.state) // onParseEntry Hook\n            // false skips the row, configurable through a hook\n            if (hookVal !== false) {\n              data.push(hookVal)\n            }\n          }\n          // console.log('entry:' + entry);\n\n          // cleanup\n          entry = []\n\n          // if 'end' is met, stop parsing\n          if (options.end && options.state.rowNum >= options.end) {\n            exit = true\n          }\n\n          // update global state\n          options.state.rowNum++\n          options.state.colNum = 1\n        }\n\n        function endOfValue () {\n          if (options.onParseValue === undefined) {\n            // onParseValue hook not set\n            entry.push(value)\n          } else if (options.headers && options.state.rowNum === 1) {\n            // don't onParseValue object headers\n            entry.push(value)\n          } else {\n            const hook = options.onParseValue(value, options.state) // onParseValue Hook\n            // false skips the row, configurable through a hook\n            if (hook !== false) {\n              entry.push(hook)\n            }\n          }\n          // console.log('value:' + value);\n          // reset the state\n          value = ''\n          state = 0\n          // update global state\n          options.state.colNum++\n        }\n\n        // escape regex-specific control chars\n        const escSeparator = RegExp.escape(separator)\n        const escDelimiter = RegExp.escape(delimiter)\n\n        // compile the regEx str using the custom delimiter/separator\n        let match = /(D|S|\\r\\n|\\n|\\r|[^DS\\r\\n]+)/\n        let matchSrc = match.source\n        matchSrc = matchSrc.replace(/S/g, escSeparator)\n        matchSrc = matchSrc.replace(/D/g, escDelimiter)\n        match = new RegExp(matchSrc, 'gm')\n\n        // put on your fancy pants...\n        // process control chars individually, use look-ahead on non-control chars\n        csv.replace(match, function (m0) {\n          if (exit) {\n            return\n          }\n          switch (state) {\n            // the start of a value\n            case 0:\n              // null last value\n              if (m0 === separator) {\n                value += ''\n                endOfValue()\n                break\n              }\n              // opening delimiter\n              if (m0 === delimiter) {\n                state = 1\n                break\n              }\n              // null last value\n              if (/^(\\r\\n|\\n|\\r)$/.test(m0)) {\n                endOfValue()\n                endOfEntry()\n                break\n              }\n              // un-delimited value\n              value += m0\n              state = 3\n              break\n\n            // delimited input\n            case 1:\n              // second delimiter? check further\n              if (m0 === delimiter) {\n                state = 2\n                break\n              }\n              // delimited data\n              value += m0\n              state = 1\n              break\n\n            // delimiter found in delimited input\n            case 2:\n              // escaped delimiter?\n              if (m0 === delimiter) {\n                value += m0\n                state = 1\n                break\n              }\n              // null value\n              if (m0 === separator) {\n                endOfValue()\n                break\n              }\n              // end of entry\n              if (/^(\\r\\n|\\n|\\r)$/.test(m0)) {\n                endOfValue()\n                endOfEntry()\n                break\n              }\n              // broken paser?\n              throw Error('CSVDataError: Illegal State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']')\n\n            // un-delimited input\n            case 3:\n              // null last value\n              if (m0 === separator) {\n                endOfValue()\n                break\n              }\n              // end of entry\n              if (/^(\\r\\n|\\n|\\r)$/.test(m0)) {\n                endOfValue()\n                endOfEntry()\n                break\n              }\n              if (m0 === delimiter) {\n              // non-compliant data\n                throw Error('CSVDataError: Illegal Quote [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']')\n              }\n              // broken parser?\n              throw Error('CSVDataError: Illegal Data [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']')\n            default:\n              // shenanigans\n              throw Error('CSVDataError: Unknown State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']')\n          }\n          // console.log('val:' + m0 + ' state:' + state);\n        })\n\n        // submit the last entry\n        // ignore null last line\n        if (entry.length !== 0) {\n          endOfValue()\n          endOfEntry()\n        }\n\n        return data\n      },\n\n      // a csv-specific line splitter\n      splitLines: function (csv, options) {\n        if (!csv) {\n          return undefined\n        }\n\n        options = options || {}\n\n        // cache settings\n        const separator = options.separator || $.csv.defaults.separator\n        const delimiter = options.delimiter || $.csv.defaults.delimiter\n\n        // set initial state if it's missing\n        options.state = options.state || {}\n        if (!options.state.rowNum) {\n          options.state.rowNum = 1\n        }\n\n        // clear initial state\n        const entries = []\n        let state = 0\n        let entry = ''\n        let exit = false\n\n        function endOfLine () {\n          // reset the state\n          state = 0\n\n          // if 'start' hasn't been met, don't output\n          if (options.start && options.state.rowNum < options.start) {\n            // update global state\n            entry = ''\n            options.state.rowNum++\n            return\n          }\n\n          if (options.onParseEntry === undefined) {\n            // onParseEntry hook not set\n            entries.push(entry)\n          } else {\n            const hookVal = options.onParseEntry(entry, options.state) // onParseEntry Hook\n            // false skips the row, configurable through a hook\n            if (hookVal !== false) {\n              entries.push(hookVal)\n            }\n          }\n\n          // cleanup\n          entry = ''\n\n          // if 'end' is met, stop parsing\n          if (options.end && options.state.rowNum >= options.end) {\n            exit = true\n          }\n\n          // update global state\n          options.state.rowNum++\n        }\n\n        // escape regex-specific control chars\n        const escSeparator = RegExp.escape(separator)\n        const escDelimiter = RegExp.escape(delimiter)\n\n        // compile the regEx str using the custom delimiter/separator\n        let match = /(D|S|\\n|\\r|[^DS\\r\\n]+)/\n        let matchSrc = match.source\n        matchSrc = matchSrc.replace(/S/g, escSeparator)\n        matchSrc = matchSrc.replace(/D/g, escDelimiter)\n        match = new RegExp(matchSrc, 'gm')\n\n        // put on your fancy pants...\n        // process control chars individually, use look-ahead on non-control chars\n        csv.replace(match, function (m0) {\n          if (exit) {\n            return\n          }\n          switch (state) {\n            // the start of a value/entry\n            case 0:\n              // null value\n              if (m0 === separator) {\n                entry += m0\n                state = 0\n                break\n              }\n              // opening delimiter\n              if (m0 === delimiter) {\n                entry += m0\n                state = 1\n                break\n              }\n              // end of line\n              if (m0 === '\\n') {\n                endOfLine()\n                break\n              }\n              // phantom carriage return\n              if (/^\\r$/.test(m0)) {\n                break\n              }\n              // un-delimit value\n              entry += m0\n              state = 3\n              break\n\n            // delimited input\n            case 1:\n              // second delimiter? check further\n              if (m0 === delimiter) {\n                entry += m0\n                state = 2\n                break\n              }\n              // delimited data\n              entry += m0\n              state = 1\n              break\n\n            // delimiter found in delimited input\n            case 2: {\n              // escaped delimiter?\n              const prevChar = entry.substr(entry.length - 1)\n              if (m0 === delimiter && prevChar === delimiter) {\n                entry += m0\n                state = 1\n                break\n              }\n              // end of value\n              if (m0 === separator) {\n                entry += m0\n                state = 0\n                break\n              }\n              // end of line\n              if (m0 === '\\n') {\n                endOfLine()\n                break\n              }\n              // phantom carriage return\n              if (m0 === '\\r') {\n                break\n              }\n              // broken paser?\n              throw Error('CSVDataError: Illegal state [Row:' + options.state.rowNum + ']')\n            }\n            // un-delimited input\n            case 3:\n              // null value\n              if (m0 === separator) {\n                entry += m0\n                state = 0\n                break\n              }\n              // end of line\n              if (m0 === '\\n') {\n                endOfLine()\n                break\n              }\n              // phantom carriage return\n              if (m0 === '\\r') {\n                break\n              }\n              // non-compliant data\n              if (m0 === delimiter) {\n                throw Error('CSVDataError: Illegal quote [Row:' + options.state.rowNum + ']')\n              }\n              // broken parser?\n              throw Error('CSVDataError: Illegal state [Row:' + options.state.rowNum + ']')\n            default:\n              // shenanigans\n              throw Error('CSVDataError: Unknown state [Row:' + options.state.rowNum + ']')\n          }\n          // console.log('val:' + m0 + ' state:' + state);\n        })\n\n        // submit the last entry\n        // ignore null last line\n        if (entry !== '') {\n          endOfLine()\n        }\n\n        return entries\n      },\n\n      // a csv entry parser\n      parseEntry: function (csv, options) {\n        // cache settings\n        const separator = options.separator\n        const delimiter = options.delimiter\n\n        // set initial state if it's missing\n        if (!options.state.rowNum) {\n          options.state.rowNum = 1\n        }\n        if (!options.state.colNum) {\n          options.state.colNum = 1\n        }\n\n        // clear initial state\n        const entry = []\n        let state = 0\n        let value = ''\n\n        function endOfValue () {\n          if (options.onParseValue === undefined) {\n            // onParseValue hook not set\n            entry.push(value)\n          } else {\n            const hook = options.onParseValue(value, options.state) // onParseValue Hook\n            // false skips the value, configurable through a hook\n            if (hook !== false) {\n              entry.push(hook)\n            }\n          }\n          // reset the state\n          value = ''\n          state = 0\n          // update global state\n          options.state.colNum++\n        }\n\n        // checked for a cached regEx first\n        if (!options.match) {\n          // escape regex-specific control chars\n          const escSeparator = RegExp.escape(separator)\n          const escDelimiter = RegExp.escape(delimiter)\n\n          // compile the regEx str using the custom delimiter/separator\n          const match = /(D|S|\\n|\\r|[^DS\\r\\n]+)/\n          let matchSrc = match.source\n          matchSrc = matchSrc.replace(/S/g, escSeparator)\n          matchSrc = matchSrc.replace(/D/g, escDelimiter)\n          options.match = new RegExp(matchSrc, 'gm')\n        }\n\n        // put on your fancy pants...\n        // process control chars individually, use look-ahead on non-control chars\n        csv.replace(options.match, function (m0) {\n          switch (state) {\n            // the start of a value\n            case 0:\n              // null last value\n              if (m0 === separator) {\n                value += ''\n                endOfValue()\n                break\n              }\n              // opening delimiter\n              if (m0 === delimiter) {\n                state = 1\n                break\n              }\n              // skip un-delimited new-lines\n              if (m0 === '\\n' || m0 === '\\r') {\n                break\n              }\n              // un-delimited value\n              value += m0\n              state = 3\n              break\n\n            // delimited input\n            case 1:\n              // second delimiter? check further\n              if (m0 === delimiter) {\n                state = 2\n                break\n              }\n              // delimited data\n              value += m0\n              state = 1\n              break\n\n            // delimiter found in delimited input\n            case 2:\n              // escaped delimiter?\n              if (m0 === delimiter) {\n                value += m0\n                state = 1\n                break\n              }\n              // null value\n              if (m0 === separator) {\n                endOfValue()\n                break\n              }\n              // skip un-delimited new-lines\n              if (m0 === '\\n' || m0 === '\\r') {\n                break\n              }\n              // broken paser?\n              throw Error('CSVDataError: Illegal State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']')\n\n            // un-delimited input\n            case 3:\n              // null last value\n              if (m0 === separator) {\n                endOfValue()\n                break\n              }\n              // skip un-delimited new-lines\n              if (m0 === '\\n' || m0 === '\\r') {\n                break\n              }\n              // non-compliant data\n              if (m0 === delimiter) {\n                throw Error('CSVDataError: Illegal Quote [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']')\n              }\n              // broken parser?\n              throw Error('CSVDataError: Illegal Data [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']')\n            default:\n              // shenanigans\n              throw Error('CSVDataError: Unknown State [Row:' + options.state.rowNum + '][Col:' + options.state.colNum + ']')\n          }\n          // console.log('val:' + m0 + ' state:' + state);\n        })\n\n        // submit the last value\n        endOfValue()\n\n        return entry\n      }\n    },\n\n    helpers: {\n\n      /**\n       * $.csv.helpers.collectPropertyNames(objectsArray)\n       * Collects all unique property names from all passed objects.\n       *\n       * @param {Array} objects Objects to collect properties from.\n       *\n       * Returns an array of property names (array will be empty,\n       * if objects have no own properties).\n       */\n      collectPropertyNames: function (objects) {\n        let o = []\n        let propName = []\n        const props = []\n        for (o in objects) {\n          for (propName in objects[o]) {\n            if ((objects[o].hasOwnProperty(propName)) &&\n                (props.indexOf(propName) < 0) &&\n                (typeof objects[o][propName] !== 'function')) {\n              props.push(propName)\n            }\n          }\n        }\n        return props\n      }\n    },\n\n    /**\n     * $.csv.toArray(csv)\n     * Converts a CSV entry string to a javascript array.\n     *\n     * @param {Array} csv The string containing the CSV data.\n     * @param {Object} [options] An object containing user-defined options.\n     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).\n     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(\").\n     *\n     * This method deals with simple CSV strings only. It's useful if you only\n     * need to parse a single entry. If you need to parse more than one line,\n     * use $.csv2Array instead.\n     */\n    toArray: function (csv, options, callback) {\n      // if callback was passed to options swap callback with options\n      if (options !== undefined && typeof (options) === 'function') {\n        if (callback !== undefined) {\n          return console.error('You cannot 3 arguments with the 2nd argument being a function')\n        }\n        callback = options\n        options = {}\n      }\n\n      options = (options !== undefined ? options : {})\n      const config = {}\n      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false)\n      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator\n      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter\n      const state = (options.state !== undefined ? options.state : {})\n\n      // setup\n      options = {\n        delimiter: config.delimiter,\n        separator: config.separator,\n        onParseEntry: options.onParseEntry,\n        onParseValue: options.onParseValue,\n        state: state\n      }\n\n      const entry = $.csv.parsers.parseEntry(csv, options)\n\n      // push the value to a callback if one is defined\n      if (!config.callback) {\n        return entry\n      } else {\n        config.callback('', entry)\n      }\n    },\n\n    /**\n     * $.csv.toArrays(csv)\n     * Converts a CSV string to a javascript array.\n     *\n     * @param {String} csv The string containing the raw CSV data.\n     * @param {Object} [options] An object containing user-defined options.\n     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).\n     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(\").\n     *\n     * This method deals with multi-line CSV. The breakdown is simple. The first\n     * dimension of the array represents the line (or entry/row) while the second\n     * dimension contains the values (or values/columns).\n     */\n    toArrays: function (csv, options, callback) {\n      // if callback was passed to options swap callback with options\n      if (options !== undefined && typeof (options) === 'function') {\n        if (callback !== undefined) {\n          return console.error('You cannot 3 arguments with the 2nd argument being a function')\n        }\n        callback = options\n        options = {}\n      }\n\n      options = (options !== undefined ? options : {})\n      const config = {}\n      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false)\n      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator\n      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter\n\n      // setup\n      let data = []\n      options = {\n        delimiter: config.delimiter,\n        separator: config.separator,\n        onPreParse: options.onPreParse,\n        onParseEntry: options.onParseEntry,\n        onParseValue: options.onParseValue,\n        onPostParse: options.onPostParse,\n        start: options.start,\n        end: options.end,\n        state: {\n          rowNum: 1,\n          colNum: 1\n        }\n      }\n\n      // onPreParse hook\n      if (options.onPreParse !== undefined) {\n        csv = options.onPreParse(csv, options.state)\n      }\n\n      // parse the data\n      data = $.csv.parsers.parse(csv, options)\n\n      // onPostParse hook\n      if (options.onPostParse !== undefined) {\n        data = options.onPostParse(data, options.state)\n      }\n\n      // push the value to a callback if one is defined\n      if (!config.callback) {\n        return data\n      } else {\n        config.callback('', data)\n      }\n    },\n\n    /**\n     * $.csv.toObjects(csv)\n     * Converts a CSV string to a javascript object.\n     * @param {String} csv The string containing the raw CSV data.\n     * @param {Object} [options] An object containing user-defined options.\n     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).\n     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(\").\n     * @param {Boolean} [headers] Indicates whether the data contains a header line. Defaults to true.\n     *\n     * This method deals with multi-line CSV strings. Where the headers line is\n     * used as the key for each value per entry.\n     */\n    toObjects: function (csv, options, callback) {\n      // if callback was passed to options swap callback with options\n      if (options !== undefined && typeof (options) === 'function') {\n        if (callback !== undefined) {\n          return console.error('You cannot 3 arguments with the 2nd argument being a function')\n        }\n        callback = options\n        options = {}\n      }\n\n      options = (options !== undefined ? options : {})\n      const config = {}\n      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false)\n      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator\n      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter\n      config.headers = 'headers' in options ? options.headers : $.csv.defaults.headers\n      options.start = 'start' in options ? options.start : 1\n\n      // account for headers\n      if (config.headers) {\n        options.start++\n      }\n      if (options.end && config.headers) {\n        options.end++\n      }\n\n      // setup\n      let lines = []\n      let data = []\n\n      options = {\n        delimiter: config.delimiter,\n        separator: config.separator,\n        onPreParse: options.onPreParse,\n        onParseEntry: options.onParseEntry,\n        onParseValue: options.onParseValue,\n        onPostParse: options.onPostParse,\n        start: options.start,\n        end: options.end,\n        state: {\n          rowNum: 1,\n          colNum: 1\n        },\n        match: false,\n        transform: options.transform\n      }\n\n      // fetch the headers\n      const headerOptions = {\n        delimiter: config.delimiter,\n        separator: config.separator,\n        start: 1,\n        end: 1,\n        state: {\n          rowNum: 1,\n          colNum: 1\n        },\n        headers: true\n      }\n\n      // onPreParse hook\n      if (options.onPreParse !== undefined) {\n        csv = options.onPreParse(csv, options.state)\n      }\n\n      // parse the csv\n      const headerLine = $.csv.parsers.splitLines(csv, headerOptions)\n      const headers = $.csv.toArray(headerLine[0], headerOptions)\n\n      // fetch the data\n      lines = $.csv.parsers.splitLines(csv, options)\n\n      // reset the state for re-use\n      options.state.colNum = 1\n      if (headers) {\n        options.state.rowNum = 2\n      } else {\n        options.state.rowNum = 1\n      }\n\n      // convert data to objects\n      for (let i = 0, len = lines.length; i < len; i++) {\n        const entry = $.csv.toArray(lines[i], options)\n        const object = {}\n        for (let j = 0; j < headers.length; j++) {\n          object[headers[j]] = entry[j]\n        }\n        if (options.transform !== undefined) {\n          data.push(options.transform.call(undefined, object))\n        } else {\n          data.push(object)\n        }\n\n        // update row state\n        options.state.rowNum++\n      }\n\n      // onPostParse hook\n      if (options.onPostParse !== undefined) {\n        data = options.onPostParse(data, options.state)\n      }\n\n      // push the value to a callback if one is defined\n      if (!config.callback) {\n        return data\n      } else {\n        config.callback('', data)\n      }\n    },\n\n    /**\n    * $.csv.fromArrays(arrays)\n    * Converts a javascript array to a CSV String.\n    *\n    * @param {Array} arrays An array containing an array of CSV entries.\n    * @param {Object} [options] An object containing user-defined options.\n    * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).\n    * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(\").\n    *\n    * This method generates a CSV file from an array of arrays (representing entries).\n    */\n    fromArrays: function (arrays, options, callback) {\n      // if callback was passed to options swap callback with options\n      if (options !== undefined && typeof (options) === 'function') {\n        if (callback !== undefined) {\n          return console.error('You cannot 3 arguments with the 2nd argument being a function')\n        }\n        callback = options\n        options = {}\n      }\n\n      options = (options !== undefined ? options : {})\n      const config = {}\n      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false)\n      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator\n      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter\n\n      let output = ''\n\n      for (let i = 0; i < arrays.length; i++) {\n        const line = arrays[i]\n        const lineValues = []\n        for (let j = 0; j < line.length; j++) {\n          let strValue = (line[j] === undefined || line[j] === null) ? '' : line[j].toString()\n          if (strValue.indexOf(config.delimiter) > -1) {\n            strValue = strValue.replace(new RegExp(config.delimiter, 'g'), config.delimiter + config.delimiter)\n          }\n\n          let escMatcher = '\\n|\\r|S|D'\n          escMatcher = escMatcher.replace('S', config.separator)\n          escMatcher = escMatcher.replace('D', config.delimiter)\n\n          if (strValue.search(escMatcher) > -1) {\n            strValue = config.delimiter + strValue + config.delimiter\n          }\n          lineValues.push(strValue)\n        }\n        output += lineValues.join(config.separator) + '\\n'\n      }\n\n      // push the value to a callback if one is defined\n      if (!config.callback) {\n        return output\n      } else {\n        config.callback('', output)\n      }\n    },\n\n    /**\n     * $.csv.fromObjects(objects)\n     * Converts a javascript dictionary to a CSV string.\n     *\n     * @param {Object} objects An array of objects containing the data.\n     * @param {Object} [options] An object containing user-defined options.\n     * @param {Character} [separator] An override for the separator character. Defaults to a comma(,).\n     * @param {Character} [delimiter] An override for the delimiter character. Defaults to a double-quote(\").\n     * @param {Character} [sortOrder] Sort order of columns (named after\n     *   object properties). Use 'alpha' for alphabetic. Default is 'declare',\n     *   which means, that properties will _probably_ appear in order they were\n     *   declared for the object. But without any guarantee.\n     * @param {Character or Array} [manualOrder] Manually order columns. May be\n     * a strin in a same csv format as an output or an array of header names\n     * (array items won't be parsed). All the properties, not present in\n     * `manualOrder` will be appended to the end in accordance with `sortOrder`\n     * option. So the `manualOrder` always takes preference, if present.\n     *\n     * This method generates a CSV file from an array of objects (name:value pairs).\n     * It starts by detecting the headers and adding them as the first line of\n     * the CSV file, followed by a structured dump of the data.\n     */\n    fromObjects: function (objects, options, callback) {\n      // if callback was passed to options swap callback with options\n      if (options !== undefined && typeof (options) === 'function') {\n        if (callback !== undefined) {\n          return console.error('You cannot 3 arguments with the 2nd argument being a function')\n        }\n        callback = options\n        options = {}\n      }\n\n      options = (options !== undefined ? options : {})\n      const config = {}\n      config.callback = ((callback !== undefined && typeof (callback) === 'function') ? callback : false)\n      config.separator = 'separator' in options ? options.separator : $.csv.defaults.separator\n      config.delimiter = 'delimiter' in options ? options.delimiter : $.csv.defaults.delimiter\n      config.headers = 'headers' in options ? options.headers : $.csv.defaults.headers\n      config.sortOrder = 'sortOrder' in options ? options.sortOrder : 'declare'\n      config.manualOrder = 'manualOrder' in options ? options.manualOrder : []\n      config.transform = options.transform\n\n      if (typeof config.manualOrder === 'string') {\n        config.manualOrder = $.csv.toArray(config.manualOrder, config)\n      }\n\n      if (config.transform !== undefined) {\n        const origObjects = objects\n        objects = []\n\n        for (let i = 0; i < origObjects.length; i++) {\n          objects.push(config.transform.call(undefined, origObjects[i]))\n        }\n      }\n\n      let props = $.csv.helpers.collectPropertyNames(objects)\n\n      if (config.sortOrder === 'alpha') {\n        props.sort()\n      }\n\n      if (config.manualOrder.length > 0) {\n        const propsManual = [].concat(config.manualOrder)\n\n        for (let p = 0; p < props.length; p++) {\n          if (propsManual.indexOf(props[p]) < 0) {\n            propsManual.push(props[p])\n          }\n        }\n        props = propsManual\n      }\n\n      let line\n      const output = []\n      let propName\n      if (config.headers) {\n        output.push(props)\n      }\n\n      for (let o = 0; o < objects.length; o++) {\n        line = []\n        for (let p = 0; p < props.length; p++) {\n          propName = props[p]\n          if (propName in objects[o] && typeof objects[o][propName] !== 'function') {\n            line.push(objects[o][propName])\n          } else {\n            line.push('')\n          }\n        }\n        output.push(line)\n      }\n\n      // push the value to a callback if one is defined\n      return $.csv.fromArrays(output, options, config.callback)\n    }\n  }\n\n  // Maintenance code to maintain backward-compatibility\n  // Will be removed in release 1.0\n  $.csvEntry2Array = $.csv.toArray\n  $.csv2Array = $.csv.toArrays\n  $.csv2Dictionary = $.csv.toObjects\n\n  // CommonJS module is defined\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = $.csv\n  }\n}).call(this)\n","// const csv = require('jquery-csv');\r\nimport * as csv from 'jquery-csv';\r\nimport * as fs from 'fs';\r\n\r\nexport class CSVDataFrame {\r\n\r\n  constructor(filename) {\r\n    const file = fs.readFileSync(filename).toString();\r\n    this.rowData = csv.toObjects(file);\r\n    this.asArrays = this.getArrays();\r\n  }\r\n\r\n  getArrays () {\r\n    this.headers = Object.keys(this.rowData[1]);\r\n    const hdrCount = this.headers.length;\r\n    const rowCount = this.rowData.length;\r\n    let asArrays = {}\r\n\r\n    for (let i=0; i<rowCount; i++) {\r\n      for (let j=0; j<hdrCount; j++) {\r\n        // console.log(`Current field: ${this.headers[j]}`)\r\n        // console.log(`Current value: ${this.rowData[i][this.headers[j]]}`)\r\n        if (i == 0) {\r\n          asArrays[this.headers[j]] = [this.rowData[i][this.headers[j]]];\r\n        } else {\r\n          asArrays[this.headers[j]].push(this.rowData[i][this.headers[j]]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    return asArrays;\r\n  }\r\n}","import { formatDollar, getImg } from \"./helper.js\";\r\n\r\nexport class DocumentHelper {\r\n\r\n  constructor (document, transactions) {\r\n    this.document = document;\r\n    this.transactions = transactions;\r\n\r\n    this.getKeyElements();\r\n  }\r\n\r\n  getKeyElements () {\r\n    this.body =               this.document.querySelector(\"body\");\r\n\r\n    this.divTopCategories =   this.document.querySelector(\".top-categories\");\r\n    this.headerH1 =           this.document.querySelector(\"header h1\");\r\n    this.headerH2 =           this.document.querySelector(\"header h2\");\r\n    this.totalSpendEl =       this.document.querySelector(\"#total-spend\");\r\n    this.emmaPortionEl =      this.document.querySelector(\"#emma-portion\");\r\n  }\r\n\r\n  addHeaderDates () {\r\n    // const headerH1 = document.querySelector(\"header h1\");\r\n    let newH1Text = this.headerH1.textContent;\r\n    newH1Text += this.transactions.monthYear;\r\n    this.headerH1.textContent = newH1Text;\r\n\r\n    // const headerH2 = document.querySelector(\"header h2\");\r\n    let newH2Text = this.transactions.minDate + \" - \" + this.transactions.maxDate;\r\n    this.headerH2.textContent = newH2Text;\r\n  }\r\n\r\n  addTotalSpends () {\r\n    this.totalSpendEl.textContent = formatDollar(this.transactions.totalSpend, 0);\r\n    this.emmaPortionEl.textContent = formatDollar(this.transactions.emmaPortion, 0);\r\n  }\r\n\r\n  addTopCategory (cat, val) {\r\n    // Add category summary\r\n    let newCatItem = this.document.createElement(\"div\");\r\n    console.log(\"newCatItem class list:\", newCatItem.classList);\r\n    newCatItem.classList.add(\"top-cat-item\");\r\n\r\n      let newImg = this.document.createElement(\"img\");\r\n      newImg.setAttribute(\"src\", getImg(cat));\r\n      newCatItem.appendChild(newImg);\r\n\r\n      let newCatInfo = this.document.createElement(\"div\");\r\n      console.log(\"newCatItem class list:\", newCatInfo.classList);\r\n      newCatInfo.classList.add(\"top-cat-info\");\r\n        let newCatAmt = this.document.createElement(\"h3\");\r\n        newCatAmt.textContent = formatDollar(val, 0);\r\n        newCatInfo.appendChild(newCatAmt);\r\n\r\n        let newCatCat = this.document.createElement(\"h4\");\r\n        newCatCat.textContent = cat;\r\n        newCatInfo.appendChild(newCatCat);\r\n      newCatItem.appendChild(newCatInfo);\r\n\r\n    this.divTopCategories.appendChild(newCatItem);\r\n  }\r\n\r\n  addAllTopCategories () {\r\n    for (let i=0; i<this.transactions.topCats.length; i++) {\r\n      this.addTopCategory(this.transactions.topCats[i], this.transactions.topVals[i]);\r\n    }\r\n  }\r\n\r\n  createTransPages () {\r\n    // this.transPagesCount = Math.floor(this.transactions.numberOfTransactions/10) + 1;\r\n\r\n    let currPage;\r\n    for (let tNum=0; tNum<this.transactions.numberOfTransactions; tNum++) {\r\n      if (tNum%10 == 0) {\r\n        this.currPage = this.createPage(tNum/10 + 2);\r\n        this.addTitle();\r\n        this.createTable();\r\n        this.body.appendChild(this.currPage);\r\n      }\r\n\r\n      this.appendRow(tNum);\r\n    }\r\n  }\r\n\r\n  createPage(pageNum) {\r\n    let newPage = this.document.createElement('div');\r\n    newPage.setAttribute(\"id\", `page-${pageNum}`);\r\n    console.log(\"newCatItem class list:\", newPage.classList);\r\n    newPage.classList.add(\"transactions\");\r\n    return newPage;\r\n  }\r\n\r\n  addTitle () {\r\n    let newH1 = this.document.createElement('h1');\r\n    let newTitle = (this.currPage.id == \"page-2\" ? \"Transactions\" : \"Transactions (cont'd)\");\r\n    newH1.textContent = newTitle;\r\n    this.currPage.appendChild(newH1);\r\n  }\r\n\r\n  createTable () {\r\n    let colNames = [\" \", \"Date\", \"Vendor\", \"Amount\"];\r\n\r\n    let newTable = this.document.createElement('table');\r\n    let newTHead = this.document.createElement('thead');\r\n    let newTR = this.document.createElement('tr');\r\n\r\n    let newTH;\r\n    for (let i=0; i<colNames.length; i++) {\r\n      newTH = this.document.createElement('th');\r\n      newTH.setAttribute(\"scope\", \"col\");\r\n      newTH.textContent = colNames[i];\r\n      newTR.appendChild(newTH);\r\n    }\r\n\r\n    newTHead.appendChild(newTR);\r\n    newTable.appendChild(newTHead);\r\n    newTable.appendChild(this.document.createElement(\"tbody\"));\r\n\r\n    this.currPage.appendChild(newTable);\r\n  }\r\n\r\n  appendRow (tNum) {\r\n    // page, cat, date, vendor, amount\r\n    let page_i = Math.floor(tNum/10) + 2;\r\n    let catImg_i = getImg(this.transactions.cats[tNum]);\r\n    let date_i = this.transactions.dateToString(tNum, \"month-day\");\r\n    let vendor_i = this.transactions.vendors[tNum];\r\n    let amount_i = formatDollar(this.transactions.amts[tNum], 2);\r\n\r\n    const currPageID = this.currPage.id;\r\n    const pageTableBody = document.querySelector(\"#\" + currPageID + \" tbody\");\r\n    let newRowEl = document.createElement('tr');\r\n      let newDataEl = document.createElement('td');\r\n      \r\n      let newImageEl = document.createElement('img');\r\n        newImageEl.setAttribute('src', catImg_i);\r\n        newDataEl.appendChild(newImageEl);\r\n      newRowEl.appendChild(newDataEl);\r\n\r\n      newDataEl = document.createElement('td');\r\n      newDataEl.textContent = date_i;\r\n      newRowEl.appendChild(newDataEl);\r\n\r\n      newDataEl = document.createElement('td');\r\n      newDataEl.textContent = vendor_i;\r\n      newRowEl.appendChild(newDataEl);\r\n\r\n      newDataEl = document.createElement('td');\r\n      newDataEl.textContent = amount_i;\r\n      newRowEl.appendChild(newDataEl);\r\n    \r\n    pageTableBody.appendChild(newRowEl);\r\n  }\r\n\r\n}","export function formatDollar(num, decimals) {\r\n  let outputNum = \"$\";\r\n\r\n  if (num >= 1000) {\r\n    let thousands = Math.floor(num / 1000);\r\n    outputNum += thousands.toString();\r\n    outputNum += \",\";\r\n    num -= (thousands*1000);\r\n  }\r\n\r\n  outputNum += num.toFixed(decimals);\r\n  return outputNum;\r\n}\r\n\r\nexport function getImg(cat) {\r\n  let catToImg = {\r\n    \"Auto\":\"auto-gas.svg\",\r\n    \"Fun\":\"fun.svg\",\r\n    \"Groceries\":\"groceries.svg\",\r\n    \"Delivery\":\"delivery.svg\",\r\n    \"Home\":\"home.svg\",\r\n    \"Home & Kingsley\":\"home.svg\",\r\n    \"Alcohol\":\"home.svg\",\r\n    \"Restaurants\":\"restaurants.svg\",\r\n    \"Travel\":\"travel.svg\",\r\n    \"Internet\": \"utilities.svg\",\r\n    \"Electric & Water\": \"utilities.svg\"\r\n  };\r\n  let imgFileStr = \"./img/\";\r\n  imgFileStr += catToImg[cat];\r\n  return imgFileStr;\r\n}","export class Transactions {\r\n\r\n  constructor (transHash) {\r\n    this.dates = transHash[\"Date\"];\r\n    this.vendors = transHash[\"Vendor\"];\r\n    this.cats = transHash[\"Category\"];\r\n    this.amts = transHash[\"Amount\"];\r\n    this.numberOfTransactions = this.dates.length;\r\n\r\n    this.getCatTotals();\r\n    this.truncateTotals();\r\n    this.getTopCatsArrays();\r\n\r\n    this.monthYear = this.dateToString(0, \"month-year\");\r\n    this.maxDate = this.dateToString(0, \"day-month\");\r\n    this.minDate = this.dateToString(this.numberOfTransactions-1, \"day-month\");\r\n  }\r\n\r\n  getCatTotals () {\r\n    this.catTotalsHash = {};\r\n    this.totalSpend = 0;\r\n    let cat_i;\r\n    let amt_i;\r\n    for (let i=0; i<this.dates.length; i++) {\r\n      cat_i = this.cats[i];\r\n      amt_i = this.amts[i];\r\n      if (this.catTotalsHash[cat_i]) {\r\n        this.catTotalsHash[cat_i] += amt_i;\r\n      } else {\r\n        this.catTotalsHash[cat_i] = amt_i;\r\n      }\r\n  \r\n      this.totalSpend += amt_i;\r\n    }\r\n\r\n    this.emmaPortion = this.totalSpend / 2;\r\n  }\r\n\r\n  truncateTotals () {\r\n    let total_i = 0;\r\n    let cat_i = \"\";\r\n    for (let i=0; i<(Object.keys(this.catTotalsHash).length); i++) {\r\n      cat_i = Object.keys(this.catTotalsHash)[i];\r\n      total_i = parseFloat(this.catTotalsHash[cat_i].toFixed(2))\r\n      this.catTotalsHash[cat_i] = total_i;\r\n    }\r\n\r\n    this.totalSpend = parseFloat(this.totalSpend.toFixed(2));\r\n    this.emmaPortion = parseFloat(this.emmaPortion.toFixed(2));\r\n  }\r\n\r\n  getTopCatsArrays () {\r\n    let catTotalsHashTemp = Object.assign({}, this.catTotalsHash);\r\n    let numberOfTopCats = Math.min(3, Object.keys(this.catTotalsHash).length);\r\n\r\n    this.topCats = [];\r\n    this.topVals = [];\r\n    let currMaxCat = \"\";\r\n    for (let i=0; i < numberOfTopCats; i++) {\r\n      currMaxCat = this.getMaxCat(catTotalsHashTemp);\r\n      this.topCats.push(currMaxCat);\r\n      this.topVals.push(catTotalsHashTemp[currMaxCat]);\r\n      delete catTotalsHashTemp[currMaxCat];\r\n    }\r\n  }\r\n\r\n  getMaxCat (catHash) {\r\n    let cats = Object.keys(catHash);\r\n    let vals = Object.values(catHash);\r\n\r\n    let maxVal = 0;\r\n    let maxCat = \"\";\r\n    for (let i=0; i<cats.length; i++) {\r\n      if (vals[i] > maxVal) {\r\n        maxVal = vals[i];\r\n        maxCat = cats[i];\r\n      }\r\n    }\r\n\r\n    return maxCat;\r\n  }\r\n\r\n  dateToString (index, type) {\r\n    // Valid types:\r\n    //  \"month-year\"  -->   \"Dec 2022\"\r\n    //  \"day-month\"   -->   \"Fri, Dec 31\"\r\n    let options;\r\n    if (type == \"month-year\") {\r\n      options = {  \"month\": \"short\", \"year\": \"numeric\" };\r\n    } else if (type == \"day-month\") {\r\n      options = { 'weekday': \"short\", \"month\": \"short\", \"day\": \"numeric\" };\r\n    } else if (type == \"month-day\") {\r\n      options = { \"month\": \"short\", \"day\": \"numeric\" };\r\n    }\r\n    return new Date(this.dates[index]).toLocaleDateString(\"en-us\", options);\r\n  }\r\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Transactions } from \"./modules/transactions.js\";\nimport { DocumentHelper } from \"./modules/document-helper.js\";\nimport { CSVDataFrame } from \"./modules/csv-data-frame.js\";\n\n// const filename = \"./csv/2023.01.08_transactions.csv\";\nconst filename = \"./../csv/2023.01.08_transactions.csv\";\nconst rawData = new CSVDataFrame(filename);\nconst trans = rawData.asArrays;\n\nlet transObj = new Transactions(trans);\nlet docHelperObj = new DocumentHelper(document, transObj);\n\ndocHelperObj.addHeaderDates();\ndocHelperObj.addTotalSpends();\ndocHelperObj.addAllTopCategories();\ndocHelperObj.createTransPages();"],"names":[],"sourceRoot":""}